# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  registry: 'vc11web'
  imageName: 'infometis-local'
  imageTag: 'v1'

steps:
- script: docker login -u $(registry) -p $(destinationRegistryPwd) 
  displayName: 'docker login'

# Build image - filebeat:infometis-local_docker
- script: |
    cd filebeat_infometis-local_docker
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/filebeat:$(imageName)_(imageTag)_docker . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=InfoMetis Local - Filebeat Docker" \
      --label "$(labelNamespace).description=This image consumes the JSON log file of the docker instance for InfoMetis Local" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/filebeat:$(imageName)_(imageTag)_docker --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/filebeat:$(imageName)_(imageTag)_docker" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).image.wrapper=$(destinationRegistry)/container-wrapper:v1" \
      --label "$(labelNamespace).image.parent=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/filebeat:infometis-local_docker
  displayName: 'Build & Push filebeat:infometis-local_docker image'

# Build image - grafana:infometis-local
- script: |
    cd grafana_infometis-local
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/grafana:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=InfoMetis Local - Grafana" \
      --label "$(labelNamespace).description=This image contains the metric dashboards for InfoMetis Local" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/grafana:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/grafana:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).image.wrapper=$(destinationRegistry)/container-wrapper:v1" \
      --label "$(labelNamespace).image.parent=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/grafana:$(imageName)_$(imageTag)
  displayName: 'Build & Push grafana:infometis_local image'

# Build image - kafka:infometis-local
- script: |
    cd kafka_infometis-local
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/kafka:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=InfoMetis Local - Kafka" \
      --label "$(labelNamespace).description=This image contains Kafka for InfoMetis Local" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/kafka:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/kafka:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).image.wrapper=$(destinationRegistry)/container-wrapper:v1" \
      --label "$(labelNamespace).image.parent=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/kafka:$(imageName)_$(imageTag)
  displayName: 'Build & Push kafka:infometis_local image'

# kafka-manager

# Build image - kibana local 
#- script: |
#    cd kibana-local
#    docker build -t $(registry)/kibana:local . --build-arg REGISTRY=$(registry)
#    docker push $(registry)/kibana:local
#  displayName: 'Build & Push kibana:local image'

# ksql server

# Build image - metricbeat local 
#- script: |
#    cd metricbeat-local
#    docker build -t $(registry)/metricbeat:local . --build-arg REGISTRY=$(registry)
#    docker push $(registry)/metricbeat:local
#  displayName: 'Build & Push metricbeat:local image'

# Build image - streamsets dev
#- script: |
#    cd streamsets-dev
#    docker build -t $(registry)/streamsets:dev . --build-arg REGISTRY=$(registry)
#    docker push $(registry)/streamsets:dev
#  displayName: 'Build & Push streamsets:dev image'

# Build image - streamsets local 
#- script: |
#    cd streamsets-local
#    docker build -t $(registry)/streamsets:local . --build-arg REGISTRY=$(registry)
#    docker push $(registry)/streamsets:local
#  displayName: 'Build & Push streamsets:local image'

# zookeeper

# Build main container image - infometis-local
#- script: |
#    cd $(imageName)
#    docker build -t $(registry)/$(imageName):$(imageTag) . --build-arg REGISTRY=$(registry)
#    docker push $(registry)/$(imageName):$(imageTag)
#  displayName: 'Build & Push main image'
