# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  registry: 'vc11web'
  imageLabel: 'InfoMetis Local V1'
  imageName: 'infometis-local'
  imageTag: 'v1'
  wrapperTag: 'v1'

steps:
- script: docker login -u $(registry) -p $(destinationRegistryPwd) 
  displayName: 'docker login'

# Build image elasticsearch:$(imageName)_$(imageTag)
- script: |
    cd elasticsearch_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/elasticsearch:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=elasticsearch \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) Elasticsearch" \
      --label "$(labelNamespace).description=This image contains Elasticsearch for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/elasticsearch:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/elasticsearch:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/elasticsearch:$(imageName)_$(imageTag)
  displayName: 'Build & Push elasticsearch:$(imageName)_$(imageTag) image'

# Build image - filebeat:$(imageName)_$(imageTag)
- script: |
    cd filebeat_$(imageName)_docker
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/filebeat:$(imageName)_$(imageTag)_docker . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=filebeat \
      --build-arg TAG=$(imageName)_$(imageTag)_docker \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Filebeat Docker" \
      --label "$(labelNamespace).description=This image consumes the JSON log file of the docker instance for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/filebeat:$(imageName)_$(imageTag)_docker --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/filebeat:$(imageName)_$(imageTag)_docker" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/filebeat:$(imageName)_$(imageTag)_docker
  displayName: 'Build & Push filebeat:$(imageName)_$(imageTag)_docker image'

# Build image - grafana:$(imageName)_$(imageTag)
- script: |
    cd grafana_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/grafana:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=grafana \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Grafana" \
      --label "$(labelNamespace).description=This image contains the metric dashboards for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/grafana:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/grafana:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/grafana:$(imageName)_$(imageTag)
  displayName: 'Build & Push grafana:$(imageName)_$(imageTag) image'

# Build image - kafka:$(imageName)_$(imageTag)
- script: |
    cd kafka_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/kafka:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=kafka \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Kafka" \
      --label "$(labelNamespace).description=This image contains Kafka for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/kafka:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/kafka:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/kafka:$(imageName)_$(imageTag)
  displayName: 'Build & Push kafka:$(imageName)_$(imageTag) image'

# Build image - kafka-manager:$(imageName)_$(imageTag)
- script: |
    cd kafka-manager_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/kafka-manager:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=kafka-manager \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Kafka Manager" \
      --label "$(labelNamespace).description=This image contains a simple Kafka Manager for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/kafka-manager:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/kafka-manager:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/kafka-manager:$(imageName)_$(imageTag)
  displayName: 'Build & Push kafka-manager:$(imageName)_$(imageTag) image'

# Build image - kibana:$(imageName)_$(imageTag)
- script: |
    cd kibana_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/kibana:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=kibana \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Kibana" \
      --label "$(labelNamespace).description=This image contains pre-installed ElasticSearch Kibana for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/kibana:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/kibana:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/kibana:$(imageName)_$(imageTag)
  displayName: 'Build & Push kibana:$(imageName)_$(imageTag) image'

# Build image - ksql-server:$(imageName)_$(imageTag)
- script: |
    cd ksql-server_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/ksql-server:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=ksql-server \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - KSQL Server" \
      --label "$(labelNamespace).description=This image contains KSQL Server for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/ksql-server:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/ksql-server:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/ksql-server:$(imageName)_$(imageTag)
  displayName: 'Build & Push ksql-server:$(imageName)_$(imageTag) image'

# Build image - metricbeat:$(imageName)_$(imageTag)
- script: |
    cd metricbeat_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/metricbeat:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=metricbeat \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Metricbeat" \
      --label "$(labelNamespace).description=This image contains Metricbeat for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/metricbeat:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/metricbeat:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/metricbeat:$(imageName)_$(imageTag)
  displayName: 'Build & Push metricbeat:$(imageName)_$(imageTag) image'

# Build image - streamsets:$(imageName)_$(imageTag)_dev
- script: |
    cd streamsets_$(imageName)_dev
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/streamsets:$(imageName)_$(imageTag)_dev . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=streamsets \
      --build-arg TAG=$(imageName)_$(imageTag)_dev \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Streamsets Dev" \
      --label "$(labelNamespace).description=This image contains Streamsets Dev for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/streamsets:$(imageName)_$(imageTag)_dev --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/streamsets:$(imageName)_$(imageTag)_dev" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/streamsets:$(imageName)_$(imageTag)_dev
  displayName: 'Build & Push streamsets:$(imageName)_$(imageTag)_dev image'

# Build image - streamsets:$(imageName)_$(imageTag)
- script: |
    cd streamsets_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/streamsets:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=streamsets \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Streamsets" \
      --label "$(labelNamespace).description=This image contains Streamsets for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/streamsets:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/streamsets:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=component" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/streamsets:$(imageName)_$(imageTag)
  displayName: 'Build & Push streamsets:$(imageName)_$(imageTag) image'

# Build image - zookeeper:$(imageName)_$(imageTag)
- script: |
    cd zookeeper_$(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/zookeeper:$(imageName)_$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=zookeeper \
      --build-arg TAG=$(imageName)_$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel) - Zookeeper" \
      --label "$(labelNamespace).description=This image contains Zookeeper for $(imageLabel)" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/zookeeper:$(imageName)_$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/zookeeper:$(imageName)_$(imageTag)" \
      --label "$(labelNamespace).image.type=application" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/zookeeper:$(imageName)_$(imageTag)
  displayName: 'Build & Push zookeeper:$(imageName)_$(imageTag) image'

# Build image - $(imageName):$(imageTag)
- script: |
    cd $(imageName)
    buildDate="$( date --rfc-3339=ns | sed 's/ /T/; s/\(\....\).*-/\1-/g' )"
    buildDate="${buildDate:0:23}${buildDate:29:6}"
    docker build -t $(destinationRegistry)/$(imageName):$(imageTag) . \
      --build-arg REGISTRY=$(destinationRegistry) \
      --build-arg IMAGE=$(imageName) \
      --build-arg TAG=$(imageTag) \
      --label "$(labelNamespace).schema-version=1.0" \
      --label "$(labelNamespace).build-date=$buildDate" \
      --label "$(labelNamespace).name=$(imageLabel)" \
      --label "$(labelNamespace).description=This image contains $(imageLabel) self-monitoring stream processing dev stack" \
      --label "$(labelNamespace).docker.cmd.help=docker run $(destinationRegistry)/$(imageName):$(imageTag) --help" \
      --label "$(labelNamespace).image.name=$(destinationRegistry)/$(imageName):$(imageTag)" \
      --label "$(labelNamespace).image.type=solution" \
      --label "$(labelNamespace).solution=$(destinationRegistry)/$(imageName):$(imageTag)"
    docker push $(registry)/$(imageName):$(imageTag)
  displayName: 'Build & Push $(imageName):$(imageTag) image'
